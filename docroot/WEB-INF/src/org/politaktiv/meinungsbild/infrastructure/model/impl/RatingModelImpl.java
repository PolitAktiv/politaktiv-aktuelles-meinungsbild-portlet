/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 *        
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.politaktiv.meinungsbild.infrastructure.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.politaktiv.meinungsbild.infrastructure.model.Rating;
import org.politaktiv.meinungsbild.infrastructure.model.RatingModel;
import org.politaktiv.meinungsbild.infrastructure.model.RatingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Rating service. Represents a row in the &quot;meinungsbild_Rating&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.politaktiv.meinungsbild.infrastructure.model.RatingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RatingImpl}.
 * </p>
 *
 * @author politaktiv
 * @see RatingImpl
 * @see org.politaktiv.meinungsbild.infrastructure.model.Rating
 * @see org.politaktiv.meinungsbild.infrastructure.model.RatingModel
 * @generated
 */
@JSON(strict = true)
public class RatingModelImpl extends BaseModelImpl<Rating>
	implements RatingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rating model instance should use the {@link org.politaktiv.meinungsbild.infrastructure.model.Rating} interface instead.
	 */
	public static final String TABLE_NAME = "meinungsbild_Rating";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ratingId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "subtopicId", Types.BIGINT },
			{ "score", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table meinungsbild_Rating (ratingId LONG not null primary key,userId LONG,subtopicId LONG,score INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table meinungsbild_Rating";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.politaktiv.meinungsbild.infrastructure.model.Rating"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.politaktiv.meinungsbild.infrastructure.model.Rating"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.politaktiv.meinungsbild.infrastructure.model.Rating"),
			true);
	public static long SUBTOPICID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Rating toModel(RatingSoap soapModel) {
		Rating model = new RatingImpl();

		model.setRatingId(soapModel.getRatingId());
		model.setUserId(soapModel.getUserId());
		model.setSubtopicId(soapModel.getSubtopicId());
		model.setScore(soapModel.getScore());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Rating> toModels(RatingSoap[] soapModels) {
		List<Rating> models = new ArrayList<Rating>(soapModels.length);

		for (RatingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.politaktiv.meinungsbild.infrastructure.model.Rating"));

	public RatingModelImpl() {
	}

	public long getPrimaryKey() {
		return _ratingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRatingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ratingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Rating.class;
	}

	public String getModelClassName() {
		return Rating.class.getName();
	}

	@JSON
	public long getRatingId() {
		return _ratingId;
	}

	public void setRatingId(long ratingId) {
		_ratingId = ratingId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	public long getSubtopicId() {
		return _subtopicId;
	}

	public void setSubtopicId(long subtopicId) {
		_columnBitmask |= SUBTOPICID_COLUMN_BITMASK;

		if (!_setOriginalSubtopicId) {
			_setOriginalSubtopicId = true;

			_originalSubtopicId = _subtopicId;
		}

		_subtopicId = subtopicId;
	}

	public long getOriginalSubtopicId() {
		return _originalSubtopicId;
	}

	@JSON
	public int getScore() {
		return _score;
	}

	public void setScore(int score) {
		_score = score;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Rating toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Rating)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Rating.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		RatingImpl ratingImpl = new RatingImpl();

		ratingImpl.setRatingId(getRatingId());
		ratingImpl.setUserId(getUserId());
		ratingImpl.setSubtopicId(getSubtopicId());
		ratingImpl.setScore(getScore());

		ratingImpl.resetOriginalValues();

		return ratingImpl;
	}

	public int compareTo(Rating rating) {
		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Rating rating = null;

		try {
			rating = (Rating)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RatingModelImpl ratingModelImpl = this;

		ratingModelImpl._originalUserId = ratingModelImpl._userId;

		ratingModelImpl._setOriginalUserId = false;

		ratingModelImpl._originalSubtopicId = ratingModelImpl._subtopicId;

		ratingModelImpl._setOriginalSubtopicId = false;

		ratingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Rating> toCacheModel() {
		RatingCacheModel ratingCacheModel = new RatingCacheModel();

		ratingCacheModel.ratingId = getRatingId();

		ratingCacheModel.userId = getUserId();

		ratingCacheModel.subtopicId = getSubtopicId();

		ratingCacheModel.score = getScore();

		return ratingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{ratingId=");
		sb.append(getRatingId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", subtopicId=");
		sb.append(getSubtopicId());
		sb.append(", score=");
		sb.append(getScore());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.politaktiv.meinungsbild.infrastructure.model.Rating");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ratingId</column-name><column-value><![CDATA[");
		sb.append(getRatingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subtopicId</column-name><column-value><![CDATA[");
		sb.append(getSubtopicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Rating.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Rating.class
		};
	private long _ratingId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _subtopicId;
	private long _originalSubtopicId;
	private boolean _setOriginalSubtopicId;
	private int _score;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Rating _escapedModelProxy;
}