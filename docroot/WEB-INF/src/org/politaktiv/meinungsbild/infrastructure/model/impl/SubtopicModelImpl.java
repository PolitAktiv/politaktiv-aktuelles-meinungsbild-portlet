/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.politaktiv.meinungsbild.infrastructure.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.politaktiv.meinungsbild.infrastructure.model.Subtopic;
import org.politaktiv.meinungsbild.infrastructure.model.SubtopicModel;
import org.politaktiv.meinungsbild.infrastructure.model.SubtopicSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Subtopic service. Represents a row in the &quot;meinungsbild_Subtopic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.politaktiv.meinungsbild.infrastructure.model.SubtopicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubtopicImpl}.
 * </p>
 *
 * @author politaktiv
 * @see SubtopicImpl
 * @see org.politaktiv.meinungsbild.infrastructure.model.Subtopic
 * @see org.politaktiv.meinungsbild.infrastructure.model.SubtopicModel
 * @generated
 */
@JSON(strict = true)
public class SubtopicModelImpl extends BaseModelImpl<Subtopic>
	implements SubtopicModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subtopic model instance should use the {@link org.politaktiv.meinungsbild.infrastructure.model.Subtopic} interface instead.
	 */
	public static final String TABLE_NAME = "meinungsbild_Subtopic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "subtopicId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "parentTopic", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table meinungsbild_Subtopic (subtopicId LONG not null primary key,name VARCHAR(75) null,url VARCHAR(250) null,parentTopic LONG)";
	public static final String TABLE_SQL_DROP = "drop table meinungsbild_Subtopic";
	public static final String ORDER_BY_JPQL = " ORDER BY subtopic.subtopicId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY meinungsbild_Subtopic.subtopicId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.politaktiv.meinungsbild.infrastructure.model.Subtopic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.politaktiv.meinungsbild.infrastructure.model.Subtopic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.politaktiv.meinungsbild.infrastructure.model.Subtopic"),
			true);
	public static long PARENTTOPIC_COLUMN_BITMASK = 1L;
	public static long SUBTOPICID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Subtopic toModel(SubtopicSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Subtopic model = new SubtopicImpl();

		model.setSubtopicId(soapModel.getSubtopicId());
		model.setName(soapModel.getName());
		model.setUrl(soapModel.getUrl());
		model.setParentTopic(soapModel.getParentTopic());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Subtopic> toModels(SubtopicSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Subtopic> models = new ArrayList<Subtopic>(soapModels.length);

		for (SubtopicSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.politaktiv.meinungsbild.infrastructure.model.Subtopic"));

	public SubtopicModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subtopicId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubtopicId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subtopicId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Subtopic.class;
	}

	@Override
	public String getModelClassName() {
		return Subtopic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("subtopicId", getSubtopicId());
		attributes.put("name", getName());
		attributes.put("url", getUrl());
		attributes.put("parentTopic", getParentTopic());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long subtopicId = (Long)attributes.get("subtopicId");

		if (subtopicId != null) {
			setSubtopicId(subtopicId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Long parentTopic = (Long)attributes.get("parentTopic");

		if (parentTopic != null) {
			setParentTopic(parentTopic);
		}
	}

	@JSON
	@Override
	public long getSubtopicId() {
		return _subtopicId;
	}

	@Override
	public void setSubtopicId(long subtopicId) {
		_subtopicId = subtopicId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public long getParentTopic() {
		return _parentTopic;
	}

	@Override
	public void setParentTopic(long parentTopic) {
		_columnBitmask |= PARENTTOPIC_COLUMN_BITMASK;

		if (!_setOriginalParentTopic) {
			_setOriginalParentTopic = true;

			_originalParentTopic = _parentTopic;
		}

		_parentTopic = parentTopic;
	}

	public long getOriginalParentTopic() {
		return _originalParentTopic;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Subtopic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Subtopic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Subtopic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubtopicImpl subtopicImpl = new SubtopicImpl();

		subtopicImpl.setSubtopicId(getSubtopicId());
		subtopicImpl.setName(getName());
		subtopicImpl.setUrl(getUrl());
		subtopicImpl.setParentTopic(getParentTopic());

		subtopicImpl.resetOriginalValues();

		return subtopicImpl;
	}

	@Override
	public int compareTo(Subtopic subtopic) {
		long primaryKey = subtopic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Subtopic)) {
			return false;
		}

		Subtopic subtopic = (Subtopic)obj;

		long primaryKey = subtopic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SubtopicModelImpl subtopicModelImpl = this;

		subtopicModelImpl._originalParentTopic = subtopicModelImpl._parentTopic;

		subtopicModelImpl._setOriginalParentTopic = false;

		subtopicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Subtopic> toCacheModel() {
		SubtopicCacheModel subtopicCacheModel = new SubtopicCacheModel();

		subtopicCacheModel.subtopicId = getSubtopicId();

		subtopicCacheModel.name = getName();

		String name = subtopicCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			subtopicCacheModel.name = null;
		}

		subtopicCacheModel.url = getUrl();

		String url = subtopicCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			subtopicCacheModel.url = null;
		}

		subtopicCacheModel.parentTopic = getParentTopic();

		return subtopicCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{subtopicId=");
		sb.append(getSubtopicId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", parentTopic=");
		sb.append(getParentTopic());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.politaktiv.meinungsbild.infrastructure.model.Subtopic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>subtopicId</column-name><column-value><![CDATA[");
		sb.append(getSubtopicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTopic</column-name><column-value><![CDATA[");
		sb.append(getParentTopic());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Subtopic.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Subtopic.class
		};
	private long _subtopicId;
	private String _name;
	private String _url;
	private long _parentTopic;
	private long _originalParentTopic;
	private boolean _setOriginalParentTopic;
	private long _columnBitmask;
	private Subtopic _escapedModel;
}