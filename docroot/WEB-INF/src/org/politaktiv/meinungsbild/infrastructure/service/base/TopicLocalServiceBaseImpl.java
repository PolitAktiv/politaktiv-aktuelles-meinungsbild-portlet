/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 *        
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.politaktiv.meinungsbild.infrastructure.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import org.politaktiv.meinungsbild.infrastructure.model.Topic;
import org.politaktiv.meinungsbild.infrastructure.service.RatingLocalService;
import org.politaktiv.meinungsbild.infrastructure.service.RatingService;
import org.politaktiv.meinungsbild.infrastructure.service.SubtopicLocalService;
import org.politaktiv.meinungsbild.infrastructure.service.SubtopicService;
import org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService;
import org.politaktiv.meinungsbild.infrastructure.service.TopicService;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.RatingPersistence;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.SubtopicPersistence;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.TopicPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the topic local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.politaktiv.meinungsbild.infrastructure.service.impl.TopicLocalServiceImpl}.
 * </p>
 *
 * @author politaktiv
 * @see org.politaktiv.meinungsbild.infrastructure.service.impl.TopicLocalServiceImpl
 * @see org.politaktiv.meinungsbild.infrastructure.service.TopicLocalServiceUtil
 * @generated
 */
public abstract class TopicLocalServiceBaseImpl implements TopicLocalService,
	IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.politaktiv.meinungsbild.infrastructure.service.TopicLocalServiceUtil} to access the topic local service.
	 */

	/**
	 * Adds the topic to the database. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @return the topic that was added
	 * @throws SystemException if a system exception occurred
	 */
	public Topic addTopic(Topic topic) throws SystemException {
		topic.setNew(true);

		topic = topicPersistence.update(topic, false);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(topic);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return topic;
	}

	/**
	 * Creates a new topic with the primary key. Does not add the topic to the database.
	 *
	 * @param topicId the primary key for the new topic
	 * @return the new topic
	 */
	public Topic createTopic(long topicId) {
		return topicPersistence.create(topicId);
	}

	/**
	 * Deletes the topic with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param topicId the primary key of the topic
	 * @throws PortalException if a topic with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteTopic(long topicId)
		throws PortalException, SystemException {
		Topic topic = topicPersistence.remove(topicId);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(topic);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Deletes the topic from the database. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteTopic(Topic topic) throws SystemException {
		topicPersistence.remove(topic);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(topic);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return topicPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public Topic fetchTopic(long topicId) throws SystemException {
		return topicPersistence.fetchByPrimaryKey(topicId);
	}

	/**
	 * Returns the topic with the primary key.
	 *
	 * @param topicId the primary key of the topic
	 * @return the topic
	 * @throws PortalException if a topic with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Topic getTopic(long topicId) throws PortalException, SystemException {
		return topicPersistence.findByPrimaryKey(topicId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return topicPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the topics.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of topics
	 * @param end the upper bound of the range of topics (not inclusive)
	 * @return the range of topics
	 * @throws SystemException if a system exception occurred
	 */
	public List<Topic> getTopics(int start, int end) throws SystemException {
		return topicPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of topics.
	 *
	 * @return the number of topics
	 * @throws SystemException if a system exception occurred
	 */
	public int getTopicsCount() throws SystemException {
		return topicPersistence.countAll();
	}

	/**
	 * Updates the topic in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @return the topic that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Topic updateTopic(Topic topic) throws SystemException {
		return updateTopic(topic, true);
	}

	/**
	 * Updates the topic in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @param merge whether to merge the topic with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the topic that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Topic updateTopic(Topic topic, boolean merge)
		throws SystemException {
		topic.setNew(false);

		topic = topicPersistence.update(topic, merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(topic);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return topic;
	}

	/**
	 * Returns the rating local service.
	 *
	 * @return the rating local service
	 */
	public RatingLocalService getRatingLocalService() {
		return ratingLocalService;
	}

	/**
	 * Sets the rating local service.
	 *
	 * @param ratingLocalService the rating local service
	 */
	public void setRatingLocalService(RatingLocalService ratingLocalService) {
		this.ratingLocalService = ratingLocalService;
	}

	/**
	 * Returns the rating remote service.
	 *
	 * @return the rating remote service
	 */
	public RatingService getRatingService() {
		return ratingService;
	}

	/**
	 * Sets the rating remote service.
	 *
	 * @param ratingService the rating remote service
	 */
	public void setRatingService(RatingService ratingService) {
		this.ratingService = ratingService;
	}

	/**
	 * Returns the rating persistence.
	 *
	 * @return the rating persistence
	 */
	public RatingPersistence getRatingPersistence() {
		return ratingPersistence;
	}

	/**
	 * Sets the rating persistence.
	 *
	 * @param ratingPersistence the rating persistence
	 */
	public void setRatingPersistence(RatingPersistence ratingPersistence) {
		this.ratingPersistence = ratingPersistence;
	}

	/**
	 * Returns the subtopic local service.
	 *
	 * @return the subtopic local service
	 */
	public SubtopicLocalService getSubtopicLocalService() {
		return subtopicLocalService;
	}

	/**
	 * Sets the subtopic local service.
	 *
	 * @param subtopicLocalService the subtopic local service
	 */
	public void setSubtopicLocalService(
		SubtopicLocalService subtopicLocalService) {
		this.subtopicLocalService = subtopicLocalService;
	}

	/**
	 * Returns the subtopic remote service.
	 *
	 * @return the subtopic remote service
	 */
	public SubtopicService getSubtopicService() {
		return subtopicService;
	}

	/**
	 * Sets the subtopic remote service.
	 *
	 * @param subtopicService the subtopic remote service
	 */
	public void setSubtopicService(SubtopicService subtopicService) {
		this.subtopicService = subtopicService;
	}

	/**
	 * Returns the subtopic persistence.
	 *
	 * @return the subtopic persistence
	 */
	public SubtopicPersistence getSubtopicPersistence() {
		return subtopicPersistence;
	}

	/**
	 * Sets the subtopic persistence.
	 *
	 * @param subtopicPersistence the subtopic persistence
	 */
	public void setSubtopicPersistence(SubtopicPersistence subtopicPersistence) {
		this.subtopicPersistence = subtopicPersistence;
	}

	/**
	 * Returns the topic local service.
	 *
	 * @return the topic local service
	 */
	public TopicLocalService getTopicLocalService() {
		return topicLocalService;
	}

	/**
	 * Sets the topic local service.
	 *
	 * @param topicLocalService the topic local service
	 */
	public void setTopicLocalService(TopicLocalService topicLocalService) {
		this.topicLocalService = topicLocalService;
	}

	/**
	 * Returns the topic remote service.
	 *
	 * @return the topic remote service
	 */
	public TopicService getTopicService() {
		return topicService;
	}

	/**
	 * Sets the topic remote service.
	 *
	 * @param topicService the topic remote service
	 */
	public void setTopicService(TopicService topicService) {
		this.topicService = topicService;
	}

	/**
	 * Returns the topic persistence.
	 *
	 * @return the topic persistence
	 */
	public TopicPersistence getTopicPersistence() {
		return topicPersistence;
	}

	/**
	 * Sets the topic persistence.
	 *
	 * @param topicPersistence the topic persistence
	 */
	public void setTopicPersistence(TopicPersistence topicPersistence) {
		this.topicPersistence = topicPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("org.politaktiv.meinungsbild.infrastructure.model.Topic",
			topicLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.politaktiv.meinungsbild.infrastructure.model.Topic");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	protected Class<?> getModelClass() {
		return Topic.class;
	}

	protected String getModelClassName() {
		return Topic.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = topicPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = RatingLocalService.class)
	protected RatingLocalService ratingLocalService;
	@BeanReference(type = RatingService.class)
	protected RatingService ratingService;
	@BeanReference(type = RatingPersistence.class)
	protected RatingPersistence ratingPersistence;
	@BeanReference(type = SubtopicLocalService.class)
	protected SubtopicLocalService subtopicLocalService;
	@BeanReference(type = SubtopicService.class)
	protected SubtopicService subtopicService;
	@BeanReference(type = SubtopicPersistence.class)
	protected SubtopicPersistence subtopicPersistence;
	@BeanReference(type = TopicLocalService.class)
	protected TopicLocalService topicLocalService;
	@BeanReference(type = TopicService.class)
	protected TopicService topicService;
	@BeanReference(type = TopicPersistence.class)
	protected TopicPersistence topicPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private static Log _log = LogFactoryUtil.getLog(TopicLocalServiceBaseImpl.class);
	private String _beanIdentifier;
}