/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.politaktiv.meinungsbild.infrastructure.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.politaktiv.meinungsbild.infrastructure.model.Topic;
import org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.RatingPersistence;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.SubtopicPersistence;
import org.politaktiv.meinungsbild.infrastructure.service.persistence.TopicPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the topic local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.politaktiv.meinungsbild.infrastructure.service.impl.TopicLocalServiceImpl}.
 * </p>
 *
 * @author politaktiv
 * @see org.politaktiv.meinungsbild.infrastructure.service.impl.TopicLocalServiceImpl
 * @see org.politaktiv.meinungsbild.infrastructure.service.TopicLocalServiceUtil
 * @generated
 */
public abstract class TopicLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TopicLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.politaktiv.meinungsbild.infrastructure.service.TopicLocalServiceUtil} to access the topic local service.
	 */

	/**
	 * Adds the topic to the database. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @return the topic that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Topic addTopic(Topic topic) throws SystemException {
		topic.setNew(true);

		return topicPersistence.update(topic);
	}

	/**
	 * Creates a new topic with the primary key. Does not add the topic to the database.
	 *
	 * @param topicId the primary key for the new topic
	 * @return the new topic
	 */
	@Override
	public Topic createTopic(long topicId) {
		return topicPersistence.create(topicId);
	}

	/**
	 * Deletes the topic with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param topicId the primary key of the topic
	 * @return the topic that was removed
	 * @throws PortalException if a topic with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Topic deleteTopic(long topicId)
		throws PortalException, SystemException {
		return topicPersistence.remove(topicId);
	}

	/**
	 * Deletes the topic from the database. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @return the topic that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Topic deleteTopic(Topic topic) throws SystemException {
		return topicPersistence.remove(topic);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Topic.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.politaktiv.meinungsbild.infrastructure.model.impl.TopicModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.politaktiv.meinungsbild.infrastructure.model.impl.TopicModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return topicPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return topicPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return topicPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Topic fetchTopic(long topicId) throws SystemException {
		return topicPersistence.fetchByPrimaryKey(topicId);
	}

	/**
	 * Returns the topic with the primary key.
	 *
	 * @param topicId the primary key of the topic
	 * @return the topic
	 * @throws PortalException if a topic with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Topic getTopic(long topicId) throws PortalException, SystemException {
		return topicPersistence.findByPrimaryKey(topicId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return topicPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the topics.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.politaktiv.meinungsbild.infrastructure.model.impl.TopicModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of topics
	 * @param end the upper bound of the range of topics (not inclusive)
	 * @return the range of topics
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Topic> getTopics(int start, int end) throws SystemException {
		return topicPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of topics.
	 *
	 * @return the number of topics
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getTopicsCount() throws SystemException {
		return topicPersistence.countAll();
	}

	/**
	 * Updates the topic in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param topic the topic
	 * @return the topic that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Topic updateTopic(Topic topic) throws SystemException {
		return topicPersistence.update(topic);
	}

	/**
	 * Returns the rating local service.
	 *
	 * @return the rating local service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.RatingLocalService getRatingLocalService() {
		return ratingLocalService;
	}

	/**
	 * Sets the rating local service.
	 *
	 * @param ratingLocalService the rating local service
	 */
	public void setRatingLocalService(
		org.politaktiv.meinungsbild.infrastructure.service.RatingLocalService ratingLocalService) {
		this.ratingLocalService = ratingLocalService;
	}

	/**
	 * Returns the rating remote service.
	 *
	 * @return the rating remote service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.RatingService getRatingService() {
		return ratingService;
	}

	/**
	 * Sets the rating remote service.
	 *
	 * @param ratingService the rating remote service
	 */
	public void setRatingService(
		org.politaktiv.meinungsbild.infrastructure.service.RatingService ratingService) {
		this.ratingService = ratingService;
	}

	/**
	 * Returns the rating persistence.
	 *
	 * @return the rating persistence
	 */
	public RatingPersistence getRatingPersistence() {
		return ratingPersistence;
	}

	/**
	 * Sets the rating persistence.
	 *
	 * @param ratingPersistence the rating persistence
	 */
	public void setRatingPersistence(RatingPersistence ratingPersistence) {
		this.ratingPersistence = ratingPersistence;
	}

	/**
	 * Returns the subtopic local service.
	 *
	 * @return the subtopic local service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.SubtopicLocalService getSubtopicLocalService() {
		return subtopicLocalService;
	}

	/**
	 * Sets the subtopic local service.
	 *
	 * @param subtopicLocalService the subtopic local service
	 */
	public void setSubtopicLocalService(
		org.politaktiv.meinungsbild.infrastructure.service.SubtopicLocalService subtopicLocalService) {
		this.subtopicLocalService = subtopicLocalService;
	}

	/**
	 * Returns the subtopic remote service.
	 *
	 * @return the subtopic remote service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.SubtopicService getSubtopicService() {
		return subtopicService;
	}

	/**
	 * Sets the subtopic remote service.
	 *
	 * @param subtopicService the subtopic remote service
	 */
	public void setSubtopicService(
		org.politaktiv.meinungsbild.infrastructure.service.SubtopicService subtopicService) {
		this.subtopicService = subtopicService;
	}

	/**
	 * Returns the subtopic persistence.
	 *
	 * @return the subtopic persistence
	 */
	public SubtopicPersistence getSubtopicPersistence() {
		return subtopicPersistence;
	}

	/**
	 * Sets the subtopic persistence.
	 *
	 * @param subtopicPersistence the subtopic persistence
	 */
	public void setSubtopicPersistence(SubtopicPersistence subtopicPersistence) {
		this.subtopicPersistence = subtopicPersistence;
	}

	/**
	 * Returns the topic local service.
	 *
	 * @return the topic local service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService getTopicLocalService() {
		return topicLocalService;
	}

	/**
	 * Sets the topic local service.
	 *
	 * @param topicLocalService the topic local service
	 */
	public void setTopicLocalService(
		org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService topicLocalService) {
		this.topicLocalService = topicLocalService;
	}

	/**
	 * Returns the topic remote service.
	 *
	 * @return the topic remote service
	 */
	public org.politaktiv.meinungsbild.infrastructure.service.TopicService getTopicService() {
		return topicService;
	}

	/**
	 * Sets the topic remote service.
	 *
	 * @param topicService the topic remote service
	 */
	public void setTopicService(
		org.politaktiv.meinungsbild.infrastructure.service.TopicService topicService) {
		this.topicService = topicService;
	}

	/**
	 * Returns the topic persistence.
	 *
	 * @return the topic persistence
	 */
	public TopicPersistence getTopicPersistence() {
		return topicPersistence;
	}

	/**
	 * Sets the topic persistence.
	 *
	 * @param topicPersistence the topic persistence
	 */
	public void setTopicPersistence(TopicPersistence topicPersistence) {
		this.topicPersistence = topicPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.politaktiv.meinungsbild.infrastructure.model.Topic",
			topicLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.politaktiv.meinungsbild.infrastructure.model.Topic");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Topic.class;
	}

	protected String getModelClassName() {
		return Topic.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = topicPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.RatingLocalService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.RatingLocalService ratingLocalService;
	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.RatingService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.RatingService ratingService;
	@BeanReference(type = RatingPersistence.class)
	protected RatingPersistence ratingPersistence;
	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.SubtopicLocalService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.SubtopicLocalService subtopicLocalService;
	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.SubtopicService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.SubtopicService subtopicService;
	@BeanReference(type = SubtopicPersistence.class)
	protected SubtopicPersistence subtopicPersistence;
	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.TopicLocalService topicLocalService;
	@BeanReference(type = org.politaktiv.meinungsbild.infrastructure.service.TopicService.class)
	protected org.politaktiv.meinungsbild.infrastructure.service.TopicService topicService;
	@BeanReference(type = TopicPersistence.class)
	protected TopicPersistence topicPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private TopicLocalServiceClpInvoker _clpInvoker = new TopicLocalServiceClpInvoker();
}